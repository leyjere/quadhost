package Information;

import java.util.concurrent.BlockingQueue;
import java.util.concurrent.PriorityBlockingQueue;

/* DataPipe serves as the gateway, handling data
 * delegation and data storage. Any instance which produces a 
 * message of type 'Data' must enter it into corresponding queue.
 */
public class DataPipe implements Runnable{

	/* Outgoing commands generated by the host */
	public static BlockingQueue<Data> outgoing = new PriorityBlockingQueue<Data>();
	/* Incoming commands received from the host */
	public static BlockingQueue<Data> incoming = new PriorityBlockingQueue<Data>();
	
	public DataPipe(){
		
	}

	/* DataPipe thread serves as a scheduler for incoming data *
	 * The respective event handling method is called relative to 
	 * the message recognized */
	@Override
	public void run() {

		while(true){
			if(!incoming.isEmpty()){
				
				Data d = (Data)incoming.remove();
				
				if(d instanceof Analog){
					//Schedule handler
				}else if(d instanceof Digital){
					//Schedule handler
				}
			}

			try {
				Thread.sleep(25);
			} catch (InterruptedException e) {
				e.printStackTrace();
				System.out.println("--- !!! DataPipe scheduler interrupted !!! ---");
			}

		}

	}

}
